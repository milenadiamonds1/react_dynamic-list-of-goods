{"version":3,"sources":["GoodsList.tsx","api/goods.ts","LoadingError.tsx","App.tsx","index.tsx"],"names":["GoodsList","goods","className","map","good","style","color","name","id","getAll","fetch","then","response","ok","headers","get","includes","json","Promise","reject","Error","statusText","LoadingError","App","useState","setGoods","all","five","red","loading","setLoad","loadingError","setloadingError","handleGoods","type","a","prevState","goodsFromServer","sort","firstGood","nextGood","localeCompare","slice","filter","onClick","classNames","ReactDOM","render","document","getElementById"],"mappings":"8PAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,oBAAIC,UAAU,OAAd,SACGD,EAAME,KAAI,SAAAC,GAAI,OACb,oBAEE,UAAQ,OACRC,MAAO,CACLC,MAAOF,EAAKE,OAEdJ,UAAU,UANZ,SAQGE,EAAKG,MAPDH,EAAKI,UCPX,SAASC,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GAAa,IAAD,EAChB,OAAKA,EAASC,GAMV,UAACD,EAASE,QAAQC,IAAI,uBAAtB,OAAC,EAAsCC,SAAS,oBAM7CJ,EAASK,OALPC,QAAQC,OACb,IAAIC,MAAM,kCAPLF,QAAQC,OACb,IAAIC,MAAMR,EAASS,gBActB,ICtBMC,EAAyB,kBACpC,oBAAIpB,UAAU,kCAAd,0CCKWqB,EAAgB,WAC3B,MAA0BC,mBAAiB,IAA3C,mBAAOvB,EAAP,KAAcwB,EAAd,KACA,EAA2BD,mBAAS,CAClCE,KAAK,EACLC,MAAM,EACNC,KAAK,IAHP,mBAAOC,EAAP,KAAgBC,EAAhB,KAKA,EAAwCN,oBAAS,GAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEMC,EAAW,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sDAGlBL,GAAQ,SAACM,GAAD,mBAAC,eACJA,GADG,kBAELF,GAAO,OAEVF,GAAgB,GAPE,cAURE,EAVQ,OAWT,QAXS,OAcT,SAdS,QAiBT,QAjBS,wCAYYzB,IAZZ,cAYZ4B,EAZY,qDFQb5B,IACJE,MAAK,SAAAV,GAAK,OAAIA,EACZqC,MAAK,SAACC,EAAWC,GAAZ,OAAyBD,EAAUhC,KACtCkC,cAAcD,EAASjC,SACzBmC,MAAM,EAAG,MEZM,eAeZL,EAfY,qDFgBb5B,IACJE,MAAK,SAAAV,GAAK,OAAIA,EAAM0C,QAAO,SAAAvC,GAAI,MAAmB,QAAfA,EAAKE,YEjBvB,eAkBZ+B,EAlBY,2CAqBZA,EAAkB,GArBN,6BAyBhBZ,EAASY,GAzBO,kDA2BhBL,GAAgB,GA3BA,yBA6BhBF,GAAQ,SAACM,GAAD,mBAAC,eACJA,GADG,kBAELF,GAAO,OA/BM,6EAAH,sDAqCjB,OACE,sBAAKhC,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,mCAIA,wBACEgC,KAAK,SACL,UAAQ,aACRU,QAAS,kBAAMX,EAAY,QAC3B/B,UAAW2C,IAAW,SAAU,WAC9B,CAAE,aAAchB,EAAQH,MAL5B,4BAUA,wBACEQ,KAAK,SACL,UAAQ,oBACRU,QAAS,kBAAMX,EAAY,SAC3B/B,UAAW2C,IAAW,SAAU,WAC9B,CAAE,aAAchB,EAAQF,OAL5B,gCAUA,wBACEO,KAAK,SACL,UAAQ,aACRU,QAAS,kBAAMX,EAAY,QAC3B/B,UAAW2C,IAAW,SAAU,WAC9B,CAAE,aAAchB,EAAQD,MAL5B,4BAUA,cAAC,EAAD,CAAW3B,MAAOA,IACjB8B,GAAgB,cAAC,EAAD,Q,MCvFvBe,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.5148b2fc.chunk.js","sourcesContent":["import React from 'react';\nimport { Good } from './types/Good';\nimport './App.scss';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => (\n  <ul className=\"list\">\n    {goods.map(good => (\n      <li\n        key={good.id}\n        data-cy=\"good\"\n        style={{\n          color: good.color,\n        }}\n        className=\"content\"\n      >\n        {good.name}\n      </li>\n    ))}\n  </ul>\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(response.statusText),\n        );\n      }\n\n      if (!response.headers.get('content-type')?.includes('application/json')) {\n        return Promise.reject(\n          new Error('Content type is not supported'),\n        );\n      }\n\n      return response.json();\n    });\n}\n\nexport const get5First = () => {\n  return getAll()\n    .then(goods => goods\n      .sort((firstGood, nextGood) => firstGood.name\n        .localeCompare(nextGood.name))\n      .slice(0, 5)); // sort and get the first 5\n};\n\nexport const getRedGoods = () => {\n  return getAll()\n    .then(goods => goods.filter(good => good.color === 'red')); // get only red\n};\n","import React from 'react';\n\nexport const LoadingError: React.FC = () => (\n  <h1 className=\"notification is-danger is-light\">\n    Oops, something went wrong!\n  </h1>\n);\n","import React, { useState } from 'react';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { GoodsList } from './GoodsList';\nimport { get5First, getAll, getRedGoods } from './api/goods';\nimport { Good } from './types/Good';\nimport { LoadingError } from './LoadingError';\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [loading, setLoad] = useState({\n    all: false,\n    five: false,\n    red: false,\n  });\n  const [loadingError, setloadingError] = useState(false);\n\n  const handleGoods = async (type: string) => {\n    let goodsFromServer: React.SetStateAction<Good[]>;\n\n    setLoad((prevState) => ({\n      ...prevState,\n      [type]: true,\n    }));\n    setloadingError(false);\n\n    try {\n      switch (type) {\n        case 'all':\n          goodsFromServer = await getAll();\n          break;\n        case 'five':\n          goodsFromServer = await get5First();\n          break;\n        case 'red':\n          goodsFromServer = await getRedGoods();\n          break;\n        default:\n          goodsFromServer = [];\n          break;\n      }\n\n      setGoods(goodsFromServer);\n    } catch {\n      setloadingError(true);\n    } finally {\n      setLoad((prevState) => ({\n        ...prevState,\n        [type]: false,\n      }\n      ));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">\n        Dynamic list of Goods\n      </h1>\n\n      <button\n        type=\"button\"\n        data-cy=\"all-button\"\n        onClick={() => handleGoods('all')}\n        className={classNames('button', 'is-light',\n          { 'is-loading': loading.all })}\n      >\n        Load all goods\n      </button>\n\n      <button\n        type=\"button\"\n        data-cy=\"first-five-button\"\n        onClick={() => handleGoods('five')}\n        className={classNames('button', 'is-light',\n          { 'is-loading': loading.five })}\n      >\n        Load 5 first goods\n      </button>\n\n      <button\n        type=\"button\"\n        data-cy=\"red-button\"\n        onClick={() => handleGoods('red')}\n        className={classNames('button', 'is-light',\n          { 'is-loading': loading.red })}\n      >\n        Load red goods\n      </button>\n\n      <GoodsList goods={goods} />\n      {loadingError && <LoadingError />}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport 'bulma/css/bulma.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}